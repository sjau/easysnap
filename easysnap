#!/usr/bin/env bash

#------------------------------------------------------------------------------#
#                                                                              #
#                              BELOW BE DRAGONS                                #
#                                                                              #
#------------------------------------------------------------------------------#

# Set the colors on the messages
_Info() {
    printf '%sInfo:%s %s\n%s\n' "${yellow}" "${reset}" "${1}" "on ${hostName}"
}
_Success() {
    printf '%sSuccess:%s %s\n%s\n' "${green}" "${reset}" "${1}" "on ${hostName}"
}
_Error() {
    printf '%sError:%s %s\n%s\n' "${red}" "${reset}" "${1}" "on ${hostName}"
    exit 1
}



# Create cleanup
cleanup() {
    # Check free space
    freeSpaceCheck || _Info "Couldn't check free space."
}

# Creating locking
lock() {
    exec 200>/run/easysnap-${interval}.lock || _Error "Couldn't acquire lock for easysnap-${interval}. Abort."
    flock -n 200 || _Error "easysnap-${interval} is already running. Abort."
}



freeSpaceCheck() {
    for curDS in "${!dsArr[@]}"; do
        reqFreeG=${dsArr[${curDS}]}
        reqFree=$((reqFreeG * 1024 * 1024 * 1024))
        curFree=$(zfs list -H -p -o avail "${curDS}")
        if (( curFree < reqFree )); then
            curFreeG=$((curFree / 1024 / 1024 / 1024))
            _Info "${curDS}: Free space is below ${reqFreeG}G at ${curFreeG}G"
        fi
    done
}

makeBookmark() {
    zfs bookmark "${localDS}@${now}" "${localDS}#${now}" || _Info "Couldn't create bookmark on ${localDS}"
}

makeSnapshot() {
    [[ "${dbs}" == *"m"* ]] && mariaDBLock
    zfs snapshot "${localDS}@${now}" || _Info "Couldn't create snapshot on ${localDS}";
        [[ "${dbs}" == *"m"* ]] && mariaDBUnlock

}

mariaDBLock() {
    mysql -e "FLUSH LOGS; FLUSH TABLES WITH READ LOCK;" || _Info "Couldn't lock MySQL/MariaDB on ${localDS}"
}

mariaDBUnlock() {
    mysql -e "UNLOCK TABLES;" || _Info "Couldn't unlock MySQL/MariaDB on ${localDS}"
}

removeLocalSnapshots() {
    snapsArr=( $(zfs list -H -t snapshot -o name -s name -d1 "${localDS}" | tac | grep "easysnap-${interval}") )
    while [[ ${#snapsArr[@]} -gt ${snaps} ]]; do
        curElements=${#snapsArr[@]}
        lastElement=$(( curElements - 1))
        zfs destroy "${snapsArr[$lastElement]}" || ( _Info "Couldn't remove old snapshots on ${localDS}. Please check manually"; break; )
        unset 'snapsArr[lastElement]'
    done
}






# Do some stuff first before actually working
# Get hostname for info/error messages
hostName=$(hostname)
# Check if stdout is a tty
if [[ -t 1 ]]; then
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    yellow=$(tput setaf 3)
    reset=$(tput sgr0)
fi



# Get arguments and create pool name array
interval="${1}"
declare -A dsArr



# Check if script runs as root
if [[ ${EUID} -ne 0 ]]; then
    _Error "Please run as root. Abort."
fi



#Check for lock
lock || _Error "Couldn't check for the file lock. Abort."
# Trap the cleanup
trap cleanup EXIT



# Check if time argument was given, can be frequent, hourly, daily, weekly, monthly or custom.
if [[ -z "${interval}" ]]; then
    _Error "No argument was given. Abort."
fi

# Get current time for snapshot
now=$(date -u "+%Y-%m-%d_%Hh%M_UTC_easysnap-${interval}")

# We want to get the snapshot as close to the designated time as possible, so we first just make the snapshots
while read -r localDS property value source; do
    # Split the value into number of snapshots and minimal free space
    IFS=: read -r snaps reqFreeG dbs <<<${value}
    # Put the dataset name and min. free space into an array for checking free size at the end of the runtime.
    (( reqFreeG > 0 )) && dsArr["${localDS}"]="${reqFreeG}"
    # Check if snaps is a number
    if [[ ${snaps} =~ ^-?[0-9]+$ ]]; then
        # Take action according to snaps limit
        (( snaps == -1 )) && makeSnapshot   # -1 is infinite snapshots, so make one
        (( snaps >= 1 )) && makeSnapshot    # 1+ is a given amount of snapshots, so make one
        # 0 means to remove all snapshots, so don't create a new one
    fi
done < <(zfs get -H easysnap:${interval} -t filesystem,volume)

# Run the bookmarking and removal routines after making the snapshots.
while read -r localDS property value source; do
    # Splite the value into number of snapshots and minim free space
    IFS=: read -r snaps reqFreeG <<<${value}
    # Check if snaps is a number
    if [[ ${snaps} =~ ^-?[0-9]+$ ]]; then
        # Take action according to snaps limit
        (( snaps == -1 )) && makeBookmark                           # -1 means to take infitine snapshots, so bookmark is required but no removing
        (( snaps == 0 )) && removeLocalSnapshots                    # 0 means to remove all snapshots, so no bookmark but removing
        (( snaps >= 1 )) && makeBookmark && removeLocalSnapshots    # 1+ means a given amount of snapshots, so make bookmark and removing
    fi
done < <(zfs get -H easysnap:${interval} -t filesystem,volume)
