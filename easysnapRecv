#!/usr/bin/env bash

#------------------------------------------------------------------------------#
#                                                                              #
#                              BELOW BE DRAGONS                                #
#                                                                              #
#------------------------------------------------------------------------------#

# Set the colors on the messages
_Info() {
    printf '%sInfo:%s %s\n%s\n' "${yellow}" "${reset}" "${1}" "on ${hostName}"
}
_Success() {
    printf '%sSuccess:%s %s\n%s\n' "${green}" "${reset}" "${1}" "on ${hostName}"
}
_Error() {
    printf '%sError:%s %s\n%s\n' "${red}" "${reset}" "${1}" "on ${hostName}"
    exit 1
}


# Check for the config file
checkConfig() {
    cfgFile="/etc/easysnap/easysnapRecv"
    [[ ! -f "${cfgFile}" ]] && _Error "Couldn't find ${cfgFile}. Abort."
}

# Creating locking
lock() {
    exec 9>/run/easysnapRecv.lock || _Error "Couldn't acquire lock for easysnapRecv. Abort."
    flock -n 9 || _Error "easysnapRecv is already running. Abort."
}

# Create cleanup
cleanup() {
    # Check free space
    freeSpaceCheck || _Info "Couldn't check free space."
    # Export pools
    exportPools || _Info "Couldn't export all pools."
}


checkPing() {
    ping -c 1 -w 5 "${remoteServer}" &>/dev/null || return $?
}

exportPools() {
    for exPool in "${!poolArr[@]}"; do
        zpool export "${exPool}" || _Info "Couldn't export ${exPool}"
    done
}

freeSpaceCheck() {
    for curDS in "${!dsArr[@]}"; do
        reqFreeG=${dsArr[${curDS}]}
        reqFree=$((reqFreeG * 1024 * 1024 * 1024))
        curFree=$(zfs list -H -p -o avail "${curDS}")
        if (( curFree < reqFree )); then
            curFreeG=$((curFree / 1024 / 1024 / 1024))
            _Info "${curDS}: Free space is below ${reqFreeG}G at ${curFreeG}G"
        fi
    done
}

getLatestLocalSnapshot() {
    unset fileLog
    easysnapDir="/var/tmp/easysnap"
    [[ -d "${easysnapDir}" ]] || mkdir "${easysnapDir}"
    fileDS="${localDS//\//,}"
    touch "${easysnapDir}/easysnapRecv_${fileDS}"
    fileLog=$(<"${easysnapDir}/easysnapRecv_${fileDS}")
    if [[ ${fileLog} = *"easysnap"* ]] && [[ $( zfs list -H -o name ${localDS}@${fileLog} &> /dev/null ) ]]; then
        latestSnapshot="${fileLog}"
    else
        latestSnapshot=$(zfs list -H -t snapshot -o name -s creation -d1 ${localDS} | grep "easysnap" | tail -1)
        latestSnapshot="${latestSnapshot##*@}"
    fi
}

getLatestRemoteSnapshot() {
    unset fileLog
    easysnapDir="/var/tmp/easysnap"
    fileDS="${remoteDS//\//,}"
    fileLog=$(ssh "${remoteHost}" "cat ${easysnapDir}/easysnap_${fileDS}");
    if [[ $fileLog == *"easysnap"* ]]; then
        latestRemoteSnapshot="${fileLog}"
    else
        latestRemoteSnapshot=$(ssh "${remoteHost}" "zfs list -H -t snapshot -o name -s creation -d1 ${remoteDS} | grep 'easysnap' | tail -n 1")
        latestRemoteSnapshot="${latestRemoteSnapshot##*@}"
    fi
}

makeFileLog() {
    easysnapDir="/var/tmp/easysnap"
    [[ -d "${easysnapDir}" ]] || mkdir "${easysnapDir}"
    fileDS="${localDS//\//,}"
    printf '%s' "${latestRemoteSnapshot}" > "${easysnapDir}/easysnapRecv_${fileDS}"
}

importPool() {
    zpool import "${localPool}" || return $?
}

loadKey() {
    if [[ ! -z "${keyDS}" ]]; then
        keystatus=$(zfs get keystatus ${keyDS})
        if [[ "${keystatus}" == *"unavailable"* ]]; then
            zfs load-key ${keyDS} || return $?
        fi
    fi
}

removeLocalSnapshots() {
    snapsArr=( $(zfs list -H -t snapshot -o name -S creation -d1 "${localDS}" | grep "easysnap-${interval}") )
    while [[ ${#snapsArr[@]} -gt ${snaps} ]]; do
        curElements=${#snapsArr[@]}
        lastElement=$(( curElements - 1))
        zfs destroy "${snapsArr[$lastElement]}" || ( _Info "Couldn't remove old snapshots on ${localDS}. Please check manually"; break; )
        unset 'snapsArr[lastElement]'
    done
}

sendDataset() {
    printf "%s\n" "Receiving full dataset: ${remoteDS}@${latestRemoteSnapshot}"
    ssh "${remoteHost}" "zfs send ${raw} ${remoteDS}@${latestRemoteSnapshot}" | zfs receive "${localDS}"
}

sendSnapshot() {
    if [[ "${intermediary}" = "y" ]]; then
        { ssh "${remoteHost}" "zfs send ${raw} -I ${remoteDS}@${latestSnapshot} ${remoteDS}@${latestRemoteSnapshot}" | zfs receive -F "${localDS}"; } ||
        { _Info "Couldn't send ${remoteDS} to ${localDS} with intermediary snapshots. Retrying as incremental snapshot" &&
          ssh "${remoteHost}" "zfs send ${raw} -i ${remoteDS}#${latestSnapshot} ${remoteDS}@${latestRemoteSnapshot}" | zfs receive -F "${localDS}"; }
    else
        ssh "${remoteHost}" "zfs send ${raw} -i ${remoteDS}#${latestSnapshot} ${remoteDS}@${latestRemoteSnapshot}" | zfs receive -F "${localDS}"
    fi
}


# Do some stuff first before actually working
# Get hostname for info/error messages
hostName=$(hostname)
# Check if stdout is a tty
if [[ -t 1 ]]; then
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    yellow=$(tput setaf 3)
    reset=$(tput sgr0)
fi


# Get arguments and create pool name array
declare -A dsArr
declare -A poolArr


# Check if script runs as root
[[ ${EUID} -ne 0 ]] && _Error "Please run as root. Abort."


#Check for lock
lock || _Error "Couldn't check for lock."
# Trap the cleanup
trap cleanup EXIT
# Check for the config file
checkConfig


# Go through the loop for receiving the backups
while IFS=';' read -r -a snapArr -u "${fd}"; do
	# Filter out empty lines or commented lines
    if [[ ! -z "${snapArr[0]}" ]] && [[ "${snapArr[0]}" != *"#"* ]]; then
        # Assign the array entries to their variabile and remove
        localDS="${snapArr[0]}" && unset snapArr[0]
        keyDS="${snapArr[1]}" && unset snapArr[1]
        raw="${snapArr[2]}" && unset snapArr[2]
        intermediary="${snapArr[3]}" && unset snapArr[3]
        exportPool="${snapArr[4]}" && unset snapArr[4]
        remoteHost="${snapArr[5]}" && unset snapArr[5]
        remoteDS="${snapArr[6]}" && unset snapArr[6]
        reqFreeG="${snapArr[7]}" && unset snapArr[7]

        # Fetch latest snapshots to local
        # Check if first letter of the localDS string is a letter. Pool names can only start with letters.
        if [[ ${localDS:0:1} =~ [[:alpha:]] ]]; then
            localPool="${localDS%%/*}"
            remoteServer="${remoteHost#*@}"

            # Check if pool has export option set in the config, if so, it will be exported when the script quits.
            [[ "${exportPool}" = "y" ]] && poolArr["${localPool}"]="${localPool}"

            # Import the pool
            zpool get name ${localPool} > /dev/null 2>&1 || ( importPool || ( _Info "Couldn't import ${localPool}" && continue ) )

            # Load the key
            loadKey || ( _Info "Couldn't load key for ${keyDS}" && continue )

            # Put the dataset name and min. free space into an array for checking free size at the end of the runtime.
            (( reqFreeG > 0 )) && dsArr["${localDS}"]="${reqFreeG}"

            # Check if remote is reachable
            checkPing || ( _Info "Couldn't ping remote server ${remoteServer}" && continue )

            # Set some options
            [[ "${raw}" = "y" ]] && raw="--raw" || raw=""

            # Get latest remote snapshot
            getLatestRemoteSnapshot

            # Check if the dataset exists, if so, do incremental update, otherwise receive full dataset
            zfs get name ${localDS}  > /dev/null 2>&1 && recvMode="incremental" || recvMode="full"
            case "${recvMode}" in
                "full")
                    sendDataset && makeFileLog || _Error "Couldn't send/receive dataset"
                    ;;
                "incremental")
                    {
                        # Get latest local snapshot
                        getLatestLocalSnapshot || ( _Info "Couldn't get latest local snapshot for ${localDS}" && continue )
                        if [[ "${latestRemoteSnapshot}" == "${latestSnapshot}" ]]; then
                            ( _Info "No new snapshot for ${remoteDS} on ${remoteHost} could be found." && continue )
                        else
                            # Send/Receive Snapshot from Remote to Local
                            sendSnapshot && makeFileLog || ( _Info "Couldn't properly receive the snapshot from ${remoteDS}" && continue )
                        fi
                    }
                    ;;
                *)
                    printf '%s %s\n' "Couldn't determine receiving mode for" ${remoteDS}
                    ;;
            esac
        fi
    fi

    # Unset snap array
    unset  snapArr

done  {fd}<"/etc/easysnap/easysnapRecv"
