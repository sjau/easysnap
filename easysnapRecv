#!/usr/bin/env bash

#------------------------------------------------------------------------------#
#                                                                              #
#                              BELOW BE DRAGONS                                #
#                                                                              #
#------------------------------------------------------------------------------#

# Set the colors on the messages
_Info() {
    printf '%sInfo:%s %s\n%s\n' "${yellow}" "${reset}" "${1}" "on ${hostName}"
}
_Success() {
    printf '%sSuccess:%s %s\n%s\n' "${green}" "${reset}" "${1}" "on ${hostName}"
}
_Error() {
    printf '%sError:%s %s\n%s\n' "${red}" "${reset}" "${1}" "on ${hostName}"
    exit 1
}




# Check for the config file
checkConfig() {
    cfgFile="/etc/easysnap/easysnap.${frequency}"
    [[ ! -f "${cfgFile}" ]] && _Error "Couldn't find ${cfgFile}. Abort."
}

# Creating locking
lock() {
    exec 200>/run/easysnapRecv-${frequency}.lock || _Error "Couldn't acquire lock for easysnapRecv-${frequency}. Abort."
    flock -n 200 || _Error "easysnapRecv-${frequency} is already running. Abort."
}

# Create cleanup
cleanup() {
    # Check free space
    freeSpaceCheck || _Info "Couldn't check free space."
    # Export pools
    exportPools || _Info "Couldn't export all pools."
}





checkPing() {
    ping -c 1 -w 5 "${remoteServer}" &>/dev/null || return $?
}

exportPools() {
    for exPool in "${!poolArr[@]}"; do
        zpool export "${exPool}" || _Info "Couldn't export ${exPool}"
    done
}

freeSpaceCheck() {
    for curDS in "${!dsArr[@]}"; do
        reqFreeG=${dsArr[${curDS}]}
        reqFree=$((reqFreeG * 1024 * 1024 * 1024))
        curFree=$(zfs list -H -p -o avail "${curDS}")
        if (( curFree < reqFree )); then
            curFreeG=$((curFree / 1024 / 1024 / 1024))
            _Info "${curDS}: Free space is below ${reqFreeG}G at ${curFreeG}G"
        fi
    done
}

getLatestLocalSnapshot() {
    latestSnapshot=$(zfs list -H -t snapshot -o name -s name -d1 ${localDS} | grep "easysnap-${frequency}" | tail -1)
    latestSnapshot="${latestSnapshot##*@}"
}

getLatestRemoteSnapshot() {
    latestRemoteSnapshot=$(ssh "${remoteHost}" "zfs list -H -t snapshot -o name -s name -d1 ${remoteDS} | grep 'easysnap-${frequency}' | tail -1")
    latestRemoteSnapshot="${latestRemoteSnapshot##*@}"
}

getNumberOfSnapshots() {
    curSnaps=$(zfs list -H -t snapshot -o name -s name -d1 "${localDS}" | grep "easysnap-${frequency}" | wc -l)
}

importPool() {
    zpool import "${localPool}" || return $?
}

loadKey() {
    if [[ ! -z "${keyDS}" ]]; then
        keystatus=$(zfs get keystatus ${keyDS})
        if [[ "${keystatus}" == *"unavailable"* ]]; then
            zfs load-key ${keyDS} || return $?
        fi
    fi
}

removeLocalSnapshots() {
    getNumberOfSnapshots
    while (( curSnaps > snaps )); do
        oldestSnap=$(zfs list -H -t snapshot -o name -s name -d1 "${localDS}"  | grep "easysnap-${frequency}" | head -1 )
        zfs destroy "${oldestSnap}" || ( _Info "Couldn't remove old snapshots on ${localDS}. Please check manually"; break; )
        getNumberOfSnapshots
    done
}

sendDataset() {
    getLatestRemoteSnapshot
    printf "%s\n" "Receiving full dataset: ${remoteDS}@${latestRemoteSnapshot}"
    ssh "${remoteHost}" "zfs send ${raw} ${remoteDS}@${latestRemoteSnapshot}" | zfs receive "${localDS}"
}

sendSnapshot() {
    getLatestRemoteSnapshot
    if [[ "${intermediary}" = "y" ]]; then
        { ssh "${remoteHost}" "zfs send ${raw} -I ${remoteDS}@${latestSnapshot} ${remoteDS}@${latestRemoteSnapshot}" | zfs receive -F "${localDS}"; } ||
        { _Info "Couldn't send ${remoteDS} with intermediary snapshots. Retrying as incremental snapshot" &&
          ssh "${remoteHost}" "zfs send ${raw} -i ${remoteDS}#${latestSnapshot} ${remoteDS}@${latestRemoteSnapshot}" | zfs receive -F "${localDS}"; }
    else
        ssh "${remoteHost}" "zfs send ${raw} -i ${remoteDS}#${latestSnapshot} ${remoteDS}@${latestRemoteSnapshot}" | zfs receive -F "${localDS}"
    fi
}



# Do some stuff first before actually working
# Check if it is an interactive shell, if so set colors.
hostName=$(hostname)
if [[ $- == *i* ]]; then
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    yellow=$(tput setaf 3)
    reset=$(tput sgr0)
fi



# Get arguments and create pool name array
frequency="${1}"
declare -A dsArr
declare -A poolArr



# Check if script runs as root
[[ ${EUID} -ne 0 ]] && _Error "Please run as root. Abort."



#Check for lock
lock || _Error "Couldn't check for lock."
# Trap the cleanup
trap cleanup EXIT
# Check for the config file
checkConfig



# Check if time argument was given, can be frequent, hourly, daily, weekly, monthly or custom.
[[ -z "${frequency}" ]] && _Error "No argument was given. Abort."


# Go through the loop for receiving the backups
while IFS=';' read -r -u "${fd}" localDS keyDS raw intermediary exportPool remoteHost remoteDS snaps reqFreeG; do
    # Check if first letter of the localDS string is a letter. Pool names can only start with letters.
    if [[ ${localDS:0:1} =~ [[:alpha:]] ]]; then
        localPool="${localDS%%/*}"
        remoteServer="${remoteHost#*@}"

        # Check if pool has export option set in the config, if so, it will be exported when the script quits.
        [[ "${exportPool}" = "y" ]] && poolArr["${localPool}"]="${localPool}"

        # Import the pool
        zpool get name ${localPool} > /dev/null 2>&1 || ( importPool || ( _Info "Couldn't import ${localPool}" && continue ) )

        # Load the key
        loadKey || ( _Info "Couldn't load key for ${keyDS}" && continue )

        # Check if remote is reachable
        checkPing || ( _Info "Couldn't ping remote server ${remoteServer}" && continue )

        # Set some options
        [[ "${raw}" = "y" ]] && raw="--raw" || raw=""

        # Check if the dataset exists, if so, do incremental update, otherwise receive full dataset
        zfs get name ${localDS}  > /dev/null 2>&1 && recvMode="incremental" || recvMode="full"
        case "${recvMode}" in
            "full")
                sendDataset || _Error "Couldn't send/receive dataset"
                ;;
            "incremental")
                {
                    # Get latest local snapshot
                    getLatestLocalSnapshot || ( _Info "Couldn't get latest local snapshot for ${localDS}" && continue )
                    # Send/Receive Snapshot from Remote to Local
                    sendSnapshot || ( _Info "Couldn't properly receive the snapshot from ${remoteDS}" && continue )
                    # Remove local snapshots
                    # Check if snaps is a number
                    if [[ ${snaps} =~ ^-?[0-9]+$ ]]; then
                        (( snaps >= 0 )) && removeLocalSnapshots    # 0+ means to limit snapshots, so removing is required
                        # -1 means infinite amount of snapshots, so no removing
                    fi
                }
                ;;
            *)
                printf "Couldn't determine receiving mode for ${remoteDS}"
        esac
    echo "$localDS -> finished"
    fi
done  {fd}<"/etc/easysnap/easysnap.${frequency}"
